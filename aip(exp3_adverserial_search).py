# -*- coding: utf-8 -*-
"""AIP(exp3-adverserial_search).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JF3OCSDk_Yd0c0qYVHKMfsGbOB2teLPh
"""

def minimax(depth,nodeIndex,maximizingPlayer,values,alpha,beta,branching,maxDepth):
  if depth==maxDepth:
    return values[nodeIndex]
  if maximizingPlayer:
    best=MIN
    for i in range(0,branching):
      val=minimax(depth+1,nodeIndex*2+i,False,values,alpha,beta,branching,maxDepth)
      best=max(best,val)
      alpha=max(alpha,best)
      if beta<=alpha:
        break
    return best
  else:
    best=MAX
    for i in range(0,branching):
      val=minimax(depth+1,nodeIndex*2+i,True,values,alpha,beta,branching,maxDepth)
      best=min(best,val)
      beta=min(beta,best)
      if beta<=alpha:
        break
    return best

b=2
maxDepth=3
values=[3,5,6,9,1,2,0,-1]
print("The optimal value is :",minimax(0,0,True,values,MIN,MAX,b,maxDepth))

b=4
maxDepth=2
values=[3,5,6,9,1,2,0,-1,-3,-5,-6,-9,-1,-2,0,1]
print("The optimal value is :",minimax(0,0,True,values,MIN,MAX,b,maxDepth))

def alpha_beta_pruning(depth, node_index, maximizing_player, values, alpha, beta):
    if depth == 0:
        return values[node_index], 1

    if maximizing_player:
        max_eval = float('-inf')
        count = 0
        for i in range(B):
            eval, child_count = alpha_beta_pruning(depth - 1, node_index * B + i, False, values, alpha, beta)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            count += child_count

            if beta <= alpha:
                break
        return max_eval, count
    else:
        min_eval = float('inf')
        count = 0
        for i in range(B):
            eval, child_count = alpha_beta_pruning(depth - 1, node_index * B + i, True, values, alpha, beta)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            count += child_count

            if beta <= alpha:
                break
        return min_eval, count

def read_input(file_name):
    with open(file_name, 'r') as file:
        B = int(file.readline().strip())
        N = int(file.readline().strip())
        leaf_nodes = list(map(int, file.readline().strip().split()))
    return B, N, leaf_nodes

def main(file_name):
    global B
    B, N, leaf_nodes = read_input(file_name)


    alpha = float('-inf')
    beta = float('inf')
    expected_value, remaining_leaf_count = alpha_beta_pruning(N, 0, True, leaf_nodes, alpha, beta)

    print(f"{expected_value} {remaining_leaf_count}")

if __name__ == "__main__":
    main("input.txt")

import json

class FamilyMember:
    def __init__(self, name):
        self.name = name
        self.children = []

    def add_child(self, child):
        self.children.append(child)

    def __str__(self, level=0):
        ret = "\t" * level + repr(self.name) + "\n"
        for child in self.children:
            ret += child.__str__(level + 1)
        return ret

class FamilyTree:
    def __init__(self):
        self.members = {}

    def load_from_json(self, filename):
        with open(filename, 'r') as file:
            data = json.load(file)
            for parent_type in data:
                for relationship in data[parent_type]:
                    parent, child = next(iter(relationship.items()))
                    self.add_member(parent, child)

    def add_member(self, parent_name, child_name):
        if parent_name not in self.members:
            self.members[parent_name] = FamilyMember(parent_name)
        if child_name not in self.members:
            self.members[child_name] = FamilyMember(child_name)

        parent = self.members[parent_name]
        child = self.members[child_name]
        parent.add_child(child)

    def display_tree(self):
        for member in self.members.values():
            if not any(member.name in m.children for m in self.members.values()):
                print(member)

# Usage
if __name__ == "__main__":
    family_tree = FamilyTree()
    family_tree.load_from_json('relationships.json')
    family_tree.display_tree()  # Display the entire family tree

import json

# Function to find and list John's children from the family tree
def find_johns_children(file_path):
    try:
        with open(file_path, 'r') as file:
            data = json.load(file)

            # Initialize a list to store John's children
            johns_children = []

            # Check the father's side
            for entry in data["father"]:
                for father, child in entry.items():
                    if father == "John":
                        johns_children.append(child)

            # Display John's children
            if johns_children:
                print("John's children are:")
                for child in johns_children:
                    print(child)
            else:
                print("John has no children listed.")

    except FileNotFoundError:
        print("The specified file was not found.")
    except json.JSONDecodeError:
        print("Error decoding JSON.")
    except Exception as e:
        print(f"An error occurred: {e}")

# Specify the path to your JSON file
json_file_path = 'relationships.json'
find_johns_children(json_file_path)

import json

# Function to find Tiffany's uncles from the family tree
def find_tiffanys_uncles(file_path):
    try:
        with open(file_path, 'r') as file:
            data = json.load(file)

            # Initialize lists to store parents and uncles
            tiffanys_uncles = set()
            tiffanys_parents = set()

            # Identify Tiffany's parents
            for entry in data["mother"]:
                for mother, child in entry.items():
                    if child == "Tiffany":
                        tiffanys_parents.add(mother)
            for entry in data["father"]:
                for father, child in entry.items():
                    if child == "Tiffany":
                        tiffanys_parents.add(father)

            # Find uncles by looking for siblings of Tiffany's parents
            for entry in data["father"]:
                for father, child in entry.items():
                    if father in tiffanys_parents:
                        # Add children of this father (siblings)
                        tiffanys_uncles.update(child for entry in data["father"] if entry.get(father) != child)

            for entry in data["mother"]:
                for mother, child in entry.items():
                    if mother in tiffanys_parents:
                        # Add children of this mother (siblings)
                        tiffanys_uncles.update(child for entry in data["mother"] if entry.get(mother) != child)

            # Display Tiffany's uncles
            if tiffanys_uncles:
                print("Tiffany's uncles are:")
                for uncle in tiffanys_uncles:
                    print(uncle)
            else:
                print("Tiffany has no uncles listed.")

    except FileNotFoundError:
        print("The specified file was not found.")
    except json.JSONDecodeError:
        print("Error decoding JSON.")
    except Exception as e:
        print(f"An error occurred: {e}")

# Specify the path to your JSON file
json_file_path = '/content/relationships.json'
find_tiffanys_uncles(json_file_path)